def isEvenOld(value):               # Time complexity: O(1)
    return value % 2 == 0           # Memory usage: O(1)


def isEvenNew(value):               # Time complexity: O(log n)
    return not int(bin(value)[-1])  # Memory usage: O(log n)


print(isEvenOld(2))
print(isEvenOld(3))
print(isEvenNew(2))
print(isEvenNew(3))

# Первая функция более читаема и более быстрая по сравнению со второй
# Вторая функция использует другой подход к решению задачи определения чётности числа,
# она использует последний знак двоичного представления числа, который в свою очередь
# может быть либо 0, либо 1, что в переводе в десятичную систему означает 0 или 1,
# а так как двоичные числа представляются в виде 1 2 4 8 16 32 и т.д., единственный способ
# сделать число нечётным, это использовать первый знак, поэтому функция отрабатывает корректно,
# но данный подход более затратен к времени и памяти.